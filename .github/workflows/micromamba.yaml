# Workflow to build the parallelproj C/CUDA libs (incl. installation of CUDA)
name: python build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }
    env:
      MPLBACKEND: Agg  # https://github.com/orgs/community/discussions/26434

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package ${{ matrix.python-version }} 
      run: |
        python -m pip install --upgrade pip
        pip install .
      
    - name: Run nifti prediction ${{ matrix.python-version }}
      run: |
        cd demo_data
        pyapetnet_predict_from_nifti brainweb_06_osem_cropped.nii brainweb_06_t1_cropped.nii S2_osem_b10_fdg_pe2i --no_coreg
